#
# Licensed to the Apache Software Foundation (ASF) under one or more
# contributor license agreements.  See the NOTICE file distributed with
# this work for additional information regarding copyright ownership.
# The ASF licenses this file to You under the Apache License, Version 2.0
# (the "License"); you may not use this file except in compliance with
# the License.  You may obtain a copy of the License at
#
#    http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.
#

"""Nexmark Query 0: Pass through (send and receive auction events)..

The Nexmark suite is a series of queries (streaming pipelines) performed
on a simulation of auction events. This query is a pass through that
simply parses the events generated by the launcher. It serves as a test
to verify the infrastructure.
"""
from __future__ import absolute_import
from __future__ import print_function

import csv
import logging

import apache_beam as beam
from apache_beam.metrics.metric import Metrics
from apache_beam.testing.benchmarks.nexmark.models import nexmark_model


class ParseEventFn(beam.DoFn):
  """Parses the raw event info into a Python objects.

  Each event line has the following format:
    person: <id starting with 'p'>,name,email,credit_card,city,
            state,timestamp,extra
    auction: <id starting with 'a'>,item_name, description,
            initial_bid,reserve_price,timestamp,expires,seller,category,extra
    bid: <auction starting with 'b'>,bidder,price,timestamp,extra

  For example:
    'p12345,maria,maria@maria.com,1234-5678-9012-3456,
                                          sunnyvale,CA,1528098831536'
    'a12345,car,2012 hyundai elantra,20K,15K,
                                      1528098831536,20180630,maria,vehicle'
    'b12345,maria,354,1528098831536'
  """

  def __init__(self):
    super(ParseEventFn, self).__init__()
    self.num_parse_errors = Metrics.counter(self.__class__, 'num_parse_errors')

  def process(self, elem):
    row = list(csv.reader([elem]))[0]
    if row[0].startswith('p'):
      event = nexmark_model.Person(*row)
    elif row[0].startswith('a'):
      event = nexmark_model.Auction(*row)
    elif row[0].startswith('b'):
      event = nexmark_model.Bid(*row)
    else:
      raise ValueError('Invalid event: %s.' % row)
    logging.debug('Parsing event: %s', event)
    yield event


def load(raw_events):
  raw_events | 'ParseEventFn' >> beam.ParDo(ParseEventFn())  # pylint: disable=expression-not-assigned


if __name__ == '__main__':
  logging.getLogger().setLevel(logging.INFO)
  load()
